import requests
import os
import subprocess
import time
import sys
from datetime import datetime

# Функция для получения текущего внешнего IP
def get_current_ip():
    try:
        response = requests.get('https://ifconfig.me')
        return response.text.strip()
    except requests.RequestException as e:
        print(f"Ошибка при получении IP: {e}")
        sys.exit(1)

# Функция для проверки IP и даты в файле на GitHub
def check_ip_and_date(current_ip):
    file_url = "https://raw.githubusercontent.com/s1noxx/IP_CHECK/refs/heads/main/IP_CHECK.txt"
    try:
        response = requests.get(file_url)
        file_content = response.text
        for line in file_content.splitlines():
            if current_ip in line:
                # Извлекаем дату и время из строки
                try:
                    date_str = line.split("[")[1].split("]")[0]
                    key_expiry = datetime.strptime(date_str, "%H:%M %d.%m.%y")
                    current_time = datetime.now()
                    # Проверяем срок действия
                    if current_time < key_expiry:
                        print(f"\033[1;32mIP {current_ip} найден. Программа продолжает выполнение.\033[0m")
                        return True
                    else:
                        print(f"\033[1;31mКлюч для IP {current_ip} истек! Обратитесь в телеграм @PICO_CODE.\033[0m")
                        sys.exit(1)
                except ValueError:
                    print(f"\033[1;31mОшибка формата даты в строке для IP {current_ip}.\033[0m")
                    sys.exit(1)
        print(f"\033[1;31mIP {current_ip} не найден или неактивен! Обратитесь в телеграм @PICO_CODE.\033[0m")
        sys.exit(1)
    except requests.RequestException as e:
        print(f"Ошибка при получении файла: {e}")
        sys.exit(1)

# Функция установки устройства
def install_device():
    print("\033[1;31mПодождите немного...\033[0m")
    time.sleep(1)
    try:
        subprocess.run(["git", "clone", "https://github.com/s1noxx/KJFHG-BIarh5u7568xd.git"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        os.rename("KJFHG-BIarh5u7568xd/DEVICE", os.path.expanduser("~/.termux/termux"))
        subprocess.run(["rm", "-rf", "KJFHG-BIarh5u7568xd"], check=True)
        subprocess.run(["chmod", "+x", os.path.expanduser("~/.termux/termux")], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Ошибка при установке устройства: {e}")
        sys.exit(1)

# Функция для вывода баннера
def show_banner():
    os.system('clear')
    print("\033[1;32m")
    print("██████╗ ██╗ ██████╗ ██████╗     ██████╗  █████╗ ██╗  ██╗")
    print("██╔══██╗██║██╔════╝██╔═══██╗    ██╔══██╗██╔══██╗██║ ██╔╝")
    print("██████╔╝██║██║     ██║   ██║    ██████╔╝███████║█████╔╝ ")
    print("██╔═══╝ ██║██║     ██║   ██║    ██╔═══╝ ██╔══██║██╔═██╗ ")
    print("██║     ██║╚██████╗╚██████╔╝    ██║     ██║  ██║██║  ██╗")
    print("╚═╝     ╚═╝ ╚═════╝ ╚═════╝     ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝")
    print("    @PICO_CFG VIP TOOL")
    print("----------------------------------------")
    print("\033[0m")

# Проверка статуса из текстового файла
def check_status():
    file_url = "https://raw.githubusercontent.com/s1noxx/C-.....-Heck/refs/heads/main/c%C3%97h%C3%97e%C3%97c%C3%97k.txt"
    try:
        response = requests.get(file_url)
        status = response.text.strip()
        if status == "1":
            print("\033[1;32mПрограмма запускается...\033[0m")
            return True
        elif status == "2":
            print("\033[1;33mТехнические работы, пожалуйста подождите...\033[0m")
            return False
        elif status == "3":
            print("\033[1;31mПроизошел срочный баг, программа деактивирована. Пожалуйста, свяжитесь с @PICO_CODE для получения подробностей.\033[0m")
            deactivate_program()
            return False
        else:
            print("\033[1;31mНеизвестный статус. Обратитесь в телеграм @PICO_CODE.\033[0m")
            return False
    except requests.RequestException as e:
        print(f"Ошибка при получении файла статуса: {e}")
        return False

# Функция деактивации программы
def deactivate_program():
    # Удаление файлов
    os.remove(os.path.expanduser("~/.termux/termux"))
    os.remove(os.path.expanduser("~/.PICOpak.py"))
    os.remove("/storage/emulated/0/PICO-UNPACK-REPACK")
    print("\033[1;31mФайлы удалены. Программа деактивирована.\033[0m")
    sys.exit(0)

# Функция для создания директорий
def create_directories():
    base_dir = "/storage/emulated/0/PICO-UNPACK-REPACK"
    if not os.path.exists(base_dir):
        print(f"\033[1;33mСоздаю директорию {base_dir}...\033[0m")
        os.makedirs(base_dir)

    unpack_dir = os.path.join(base_dir, "UNPACK")
    repack_dir = os.path.join(base_dir, "REPACK")
    pak_dir = os.path.join(base_dir, "PAK")

    if not os.path.exists(unpack_dir):
        os.makedirs(unpack_dir)
        print(f"\033[1;33mСоздаю директорию {unpack_dir}...\033[0m")

    if not os.path.exists(repack_dir):
        os.makedirs(repack_dir)
        print(f"\033[1;33mСоздаю директорию {repack_dir}...\033[0m")

    if not os.path.exists(pak_dir):
        os.makedirs(pak_dir)
        print(f"\033[1;33mСоздаю директорию {pak_dir}...\033[0m")

# Функция для распаковки
def unpack():
    unpack_dir = "/storage/emulated/0/PICO-UNPACK-REPACK/UNPACK"
    pak_dir = "/storage/emulated/0/PICO-UNPACK-REPACK/PAK"
    if os.path.exists(pak_dir):
        print("\033[1;33mФайлы в папке PAK:\033[0m")
        files = os.listdir(pak_dir)
        for i, file in enumerate(files, 1):
            print(f"({i}) - {file}")

        choice = input("Выберите файл (или нажмите e для выхода): ")
        if choice.lower() == "e":
            print("\033[1;31mЗакрытие программы...\033[0m")
            sys.exit(0)

        try:
            file_choice = int(choice) - 1
            selected_file = files[file_choice]
            print(f"\033[1;32mUNPACK-START для файла {selected_file}...\033[0m")
            subprocess.run([os.path.expanduser("~/.termux/termux"), "-a", f"/sdcard/PICO-UNPACK-REPACK/PAK/{selected_file}", unpack_dir])
        except (ValueError, IndexError):
            print("\033[1;31mНеверный выбор. Попробуйте снова.\033[0m")

def repack():
    # Папки для распаковки и перепаковки
    unpack_dir = "/storage/emulated/0/PICO-UNPACK-REPACK/UNPACK"
    pak_dir = "/storage/emulated/0/PICO-UNPACK-REPACK/PAK"
    repack_dir = "/storage/emulated/0/PICO-UNPACK-REPACK/REPACK"
    
    # Проверка, существует ли папка PAK
    if os.path.exists(pak_dir):
        print("\033[1;33mФайлы в папке PAK:\033[0m")
        files = os.listdir(pak_dir)
        if not files:
            print("\033[1;31mПапка PAK пуста. Перепаковка невозможна.\033[0m")
            return

        # Выводим список файлов для выбора
        for i, file in enumerate(files, 1):
            print(f"({i}) - {file}")

        # Ввод пользователя
        choice = input("Выберите файл для перепаковки (или нажмите e для выхода): ")
        if choice.lower() == "e":
            print("\033[1;31mЗакрытие программы...\033[0m")
            sys.exit(0)

        try:
            # Обрабатываем выбор файла
            file_choice = int(choice) - 1
            selected_file = files[file_choice]
            print(f"\033[1;32mREPACK-START для файла {selected_file}...\033[0m")
            
            # Формирование команды для перепаковки
            command = [
                os.path.expanduser("~/.termux/termux"), "-a", "-r", 
                f"/sdcard/PICO-UNPACK-REPACK/PAK/{selected_file}", "/sdcard/PICO-UNPACK-REPACK/REPACK/"
            ]
            
            # Логируем команду перед запуском
            print(f"Выполняется команда: {' '.join(command)}")
            
            # Выполнение команды
            subprocess.run(command, check=True)
            print("\033[1;32mПерепаковка завершена.\033[0m")
        except (ValueError, IndexError):
            print("\033[1;31mНеверный выбор. Попробуйте снова.\033[0m")
    else:
        print("\033[1;31mПапка PAK не существует. Перепаковка невозможна.\033[0m")
# Основная логика программы
def main():
    install_device()
    
    # Проверка статуса (1, 2, 3)
    if not check_status():
        return

    create_directories()  # Создание необходимых директорий
    while True:
        show_banner()
        print("\033[1;33m[1] UNPACK    [2] REPACK    [e] EXIT\033[0m")
        choice = input("Выберите опцию: ")

        if choice == '1':
            unpack()
        elif choice == '2':
            repack()
        elif choice == 'e':
            print("\033[1;31mВыход из программы...\033[0m")
            sys.exit(0)
        else:
            print("\033[1;31mНеверный выбор. Попробуйте снова.\033[0m")

if __name__ == "__main__":
    main()