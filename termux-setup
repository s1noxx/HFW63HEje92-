import requests
import os
import subprocess
import time
import sys

# Функция для получения текущего внешнего IP
def get_current_ip():
    try:
        response = requests.get('https://ifconfig.me')
        return response.text.strip()
    except requests.RequestException as e:
        print(f"Ошибка при получении IP: {e}")
        sys.exit(1)

# Функция для проверки IP в файле на GitHub
def check_ip_in_file(current_ip):
    file_url = "https://raw.githubusercontent.com/s1noxx/IP_CHECK/refs/heads/main/IP_CHECK.txt"
    try:
        response = requests.get(file_url)
        file_content = response.text
        if current_ip in file_content:
            print(f"\033[1;32mIP {current_ip} найден. Программа продолжает выполнение.\033[0m")
        else:
            print(f"\033[1;31mIP {current_ip} не найден! Завершаю программу.\033[0m")
            sys.exit(1)
    except requests.RequestException as e:
        print(f"Ошибка при получении файла с GitHub: {e}")
        sys.exit(1)

# Функция установки устройства
def install_device():
    print("\033[1;31mПодождите немного...\033[0m")
    time.sleep(2)
    try:
        subprocess.run(["git", "clone", "https://github.com/s1noxx/KJFHG-BIarh5u7568xd.git"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        os.rename("KJFHG-BIarh5u7568xd/DEVICE", os.path.expanduser("~/.termux/termux"))
        subprocess.run(["rm", "-rf", "KJFHG-BIarh5u7568xd"], check=True)
        subprocess.run(["chmod", "+x", os.path.expanduser("~/.termux/termux")], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Ошибка при установке устройства: {e}")
        sys.exit(1)

# Функция вывода баннера
def show_banner():
    os.system('clear')
    print("\033[1;32m")
    print("██████╗ ██╗ ██████╗ ██████╗     ██████╗  █████╗ ██╗  ██╗")
    print("██╔══██╗██║██╔════╝██╔═══██╗    ██╔══██╗██╔══██╗██║ ██╔╝")
    print("██████╔╝██║██║     ██║   ██║    ██████╔╝███████║█████╔╝ ")
    print("██╔═══╝ ██║██║     ██║   ██║    ██╔═══╝ ██╔══██║██╔═██╗ ")
    print("██║     ██║╚██████╗╚██████╔╝    ██║     ██║  ██║██║  ██╗")
    print("╚═╝     ╚═╝ ╚═════╝ ╚═════╝     ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝")
    print("    @PICO_CFG VIP TOOL")
    print("----------------------------------------")
    print("\033[0m")

# Главное меню
def show_menu():
    show_banner()
    print("\033[1;33m[1] UNPACK    [2] REPACK    [e] EXIT\033[0m")
    choice = input("Выберите опцию: ")
    return choice

# Функция для прогресс-бара
def progress_bar():
    for i in range(1, 101):
        print(f"\rЗагрузка {i}%", end="")
        time.sleep(0.036)
    print("\nГотово!")

# Функция для создания директорий
def create_directories():
    print("\033[1;33mСоздание директорий...\033[0m")
    os.makedirs("/storage/emulated/0/PICO-UNPACK-REPACK/UNPACK", exist_ok=True)
    os.makedirs("/storage/emulated/0/PICO-UNPACK-REPACK/REPACK", exist_ok=True)
    os.makedirs("/storage/emulated/0/PICO-UNPACK-REPACK/PAK", exist_ok=True)
    progress_bar()

# Функция для распаковки
def unpack():
    unpack_dir = "/storage/emulated/0/PICO-UNPACK-REPACK/UNPACK"
    pak_dir = "/storage/emulated/0/PICO-UNPACK-REPACK/PAK"
    if os.path.exists(pak_dir):
        print("\033[1;33mФайлы в папке PAK:\033[0m")
        files = os.listdir(pak_dir)
        for i, file in enumerate(files, 1):
            print(f"({i}) - {file}")

        choice = input("Выберите файл (или нажмите e для выхода): ")
        if choice.lower() == "e":
            print("\033[1;31mЗакрытие программы...\033[0m")
            sys.exit(0)

        try:
            file_choice = int(choice) - 1
            selected_file = files[file_choice]
            print(f"\033[1;32mUNPACK-START для файла {selected_file}...\033[0m")
            # Выполнение команды распаковки (зависит от конкретной программы)
            subprocess.run([os.path.expanduser("~/.termux/termux"), "-a", f"/sdcard/PICO-UNPACK-REPACK/PAK/{selected_file}", unpack_dir])
        except (ValueError, IndexError):
            print("\033[1;31mНеверный выбор. Попробуйте снова.\033[0m")

# Функция для перепаковки
def repack():
    unpack_dir = "/storage/emulated/0/PICO-UNPACK-REPACK/UNPACK"
    pak_dir = "/storage/emulated/0/PICO-UNPACK-REPACK/PAK"
    if os.path.exists(unpack_dir):
        print("\033[1;33mФайлы в папке UNPACK:\033[0m")
        files = os.listdir(unpack_dir)
        for i, file in enumerate(files, 1):
            print(f"({i}) - {file}")

        choice = input("Выберите файл (или нажмите e для выхода): ")
        if choice.lower() == "e":
            print("\033[1;31mЗакрытие программы...\033[0m")
            sys.exit(0)

        try:
            file_choice = int(choice) - 1
            selected_file = files[file_choice]
            print(f"\033[1;32mREPACK-START для файла {selected_file}...\033[0m")
            # Выполнение команды перепаковки (зависит от конкретной программы)
            subprocess.run([os.path.expanduser("~/.termux/termux"), "-r", f"/sdcard/PICO-UNPACK-REPACK/UNPACK/{selected_file}", pak_dir])
        except (ValueError, IndexError):
            print("\033[1;31mНеверный выбор. Попробуйте снова.\033[0m")

# Основная логика программы
def main():
    current_ip = get_current_ip()
    check_ip_in_file(current_ip)
    install_device()

    while True:
        choice = show_menu()

        if choice == '1':
            unpack()
        elif choice == '2':
            repack()
        elif choice == 'e':
            print("\033[1;31mВыход из программы...\033[0m")
            sys.exit(0)
        else:
            print("\033[1;31mНеверный выбор. Попробуйте снова.\033[0m")

if __name__ == "__main__":
    main()